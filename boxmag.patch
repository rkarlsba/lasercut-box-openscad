--- box.scad	2019-12-28 20:29:44.000000000 +0100
+++ boxmag.scad	2019-12-28 23:11:05.000000000 +0100
@@ -1,5 +1,3 @@
-// vim:ts=2:sw=2:sws=2:et:ai
-
 w_divider_color = "CadetBlue";
 h_divider_color = "CornflowerBlue";
 front_color = "RoyalBlue";
@@ -13,28 +11,26 @@
 module box(width, height, depth, thickness,
            finger_width, // (default = 2 * thickness)
            finger_margin, // (default = 2 * thickness)
-           inner = false,
-           open = false,
+           inner = false, 
+           open = false, // there should be a top
            inset = 0,
-           dividers = [ 0, 0 ],
+           dividers = [ 0, 0 ], // how many dividers, facing which way?
            holes = [],
            hole_dia = 0,
            ears = 0,
-           robust_ears = false,
-           assemble = false,
+           assemble = false, // show assembled or flat?
            hole_width = false,
-           kerf = 0.0,
-           labels = false,
+	   frac = 1, // what fraction of the back should the front be?
+	   angle=true, // should the dividers/sides be cut at an angle from back to front?
+           kerf = 0.0, // width of laser cut
+           labels = false, // engrave labels on things?
            explode = 0,
-           spacing = 0,
-           double_doors = false,
-           door_knob = 0)
+           spacing = 0)
 {
   w = inner ? width + 2 * thickness : width;
   h = inner ? height + 2 * thickness : height;
   d = inner ? depth + 2 * thickness : depth;
   t = thickness;
-  dd = double_doors;
   hm = h - inset;
   fm = (finger_margin == undef) ? thickness * 2 : finger_margin;
   fw = (finger_width == undef) ? thickness * 2 : finger_width;
@@ -47,56 +43,29 @@
   module compkerf() { offset(delta = kc) children(); }
 
   // 2D panels with finger cuts
-  module left() { cut_left() panel2d(d, h); }
-  module right() { cut_right() panel2d(d, h); }
+  module left() { cut_left() panel2d(d, h, frac); }
+  module right() { cut_right() panel2d(d, h, frac, r=1); }
   module top() { 
-    if (dd) {
-      if (robust_ears) {
-        echo("WARNING: Ignoring robust_ears with double_doors");
-      }
-      if (ears_radius > 0) {
-        difference() {
-          panel2d(w/2-thickness/4, d);
-          translate([w/4*3/2,d/2]) circle(d=door_knob);
-          translate([t, d-t+e]) panel2d(2*t, t);
-          translate([t, -e]) panel2d(2*t, t);
-        }
-        translate([w,0,0])
-          mirror([1,0,0])
-            difference() {
-              panel2d(w/2-thickness/4, d);
-              translate([w/4*3/2,d/2]) circle(d=door_knob);
-              translate([t, d-t+e]) panel2d(2*t, t);
-              translate([t, -e]) panel2d(2*t, t);
-            }
-      } else {
-        echo("Ears radius <= 0 and double doors? You must be kidding...");
-        cut_top() panel2d(w/2, d);
+    if (ears_radius > 0) {
+      difference() {
+        panel2d(w, d);
+        translate([t, d-t+e]) panel2d(2*t, t);
+        translate([t, -e]) panel2d(2*t, t);
       }
     } else {
-      if (ears_radius > 0) {
-        difference() {
-          panel2d(w+(robust_ears ? t : 0), d);
-          translate([(w+(robust_ears ? t : 0))/4*3,d/2]) circle(d=door_knob);
-          translate([t+(robust_ears ? t : 0), d-t+e]) panel2d(2*t, t);
-          translate([t+(robust_ears ? t : 0), -e]) panel2d(2*t, t);
-        }
-      } else {
-        cut_top() panel2d(w, d);
-      }
+      cut_top() panel2d(w, d);
     }
   }
   module bottom() { cut_bottom() panel2d(w, d); }
   module ears_outer(is_front) {
     translate([is_front ? 0 : w, h]) 
-      circle(ears_radius);
+      circle(ears_radius, [0, 0]);
   }
   module ears_inner(is_front) {
     translate([is_front ? 0 : w, h])
       difference() {
-      circle(ears_radius-ears_width);
-      translate([-+(robust_ears ? t : 0),0])
-        square([t+((robust_ears && !double_doors) ? t : 0), t]);
+      circle(ears_radius-ears_width, [0, 0]);
+      square([t, t]);
     }
   }
   module back() {
@@ -120,7 +89,7 @@
     cut_front() difference() {
       union()
       {
-        panel2d(w, h); 
+        panel2d(w, h*frac); 
         if (ears_radius > 0)
           ears_outer(true);
       }
@@ -132,8 +101,8 @@
     }
   }
 
-  module w_divider() { cut_w_divider() translate([0, t, 0]) panel2d(w, h-t); }
-  module h_divider() { cut_h_divider() translate([0, t, 0]) panel2d(d, h-t); }
+  module w_divider() { cut_w_divider() translate([0, t, 0]) panel2d(w, h-t, frac, r=1); }
+  module h_divider() { cut_h_divider() translate([0, t, 0]) panel2d(d, h-t, frac, r=1); }
 
   // Panels positioned in 3D
   module front3d() {
@@ -238,7 +207,7 @@
       x5 = w + 2 * kc + e + spacing;
       translate([x5,y1]) compkerf() top();
     }
-    x6 = w + 2 * kc + (keep_top ? w+e : 0) + e + spacing + ((robust_ears && !double_doors) ? t : 0);
+    x6 = w + 2 * kc + (keep_top ? w+e : 0) + e + spacing;
     translate([x6,y1]) compkerf() w_dividers();
     translate([x6+kerf,y1 + (dividers[0] > 0 ? y1 : 0)]) compkerf() h_dividers();
   }
@@ -314,6 +283,7 @@
   module cut_left() {
     difference() {
       children();
+      // add triangle here?
       translate([t,inset]) cuts(d-2*t);
       if (keep_top && (ears_radius == 0)) movecutstop(d, h) translate([t,0]) cuts(d-2*t);
       movecutsleft(d, h) invcuts(h);
@@ -326,6 +296,7 @@
     }
   }
 
+
   module cut_bottom() { cut_top() children(); }
   module cut_right() { cut_left() children(); }
   module cut_back() { cut_front() children(); }
@@ -420,8 +391,16 @@
     }
   }
 
-  module panel2d(x, y) {
-    square([x,y]);
+  module panel2d(x, y, frac=1, r=0) {
+    if (frac==1) {
+       square([x,y]);
+    } else if (r) {
+       points=[[0,0],[x,0],[x,y],[x-x*frac,y],[0,y*frac],[0,0]];
+       polygon(points);
+    } else {
+       points=[[0,0],[0,y],[x*frac,y],[x,y*frac],[x,0],[0,0]];
+       polygon(points);
+    }
   }
 
   if (assemble)
